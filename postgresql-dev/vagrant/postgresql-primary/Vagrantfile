# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/xenial64"
  config.vm.network "private_network", ip: "192.168.33.10"
  ENV["db_user"] = "DBUSER"
  ENV["db_pass"] = "DBPASS"
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  # config.vm.network "forwarded_port", guest: 5432, host: 5432

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", env: {DB_USER: ENV["db_user"], DB_PASS: ENV["db_pass"]}, inline: <<-SHELL
	apt-get install wget ca-certificates    
	wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
	sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" >> /etc/apt/sources.list.d/pgdg.list'
	apt-get update
    apt-get install -y postgresql-11
    pg_dropcluster --stop 11 main
    pg_createcluster --start 11 main -- --encoding=UTF8 --locale=C
    sed -i "s/#listen_address.*/listen_addresses '*'/" /etc/postgresql/11/main/postgresql.conf
    sed -i "s/#wal_level.*/wal_level logical/" /etc/postgresql/11/main/postgresql.conf
    echo "local all postgres  peer" > /etc/postgresql/11/main/pg_hba.conf
    echo "local all all  md5" >> /etc/postgresql/11/main/pg_hba.conf
    echo "host all all 0.0.0.0/0 md5" >> /etc/postgresql/11/main/pg_hba.conf
    echo "host all all ::1/128 md5" >> /etc/postgresql/11/main/pg_hba.conf
    echo "host replication all 0.0.0.0/0 md5" >> /etc/postgresql/11/main/pg_hba.conf
    /etc/init.d/postgresql restart
    sudo su postgres -c "psql -c 'CREATE DATABASE myclinic' "
    sudo su postgres -c "psql -c \\"CREATE ROLE $DB_USER SUPERUSER LOGIN PASSWORD '$DB_PASS'\\" "
    sudo su postgres -c "psql -d myclinic -c \\"CREATE PUBLICATION pub FOR ALL TABLES \\" "
  SHELL
end
